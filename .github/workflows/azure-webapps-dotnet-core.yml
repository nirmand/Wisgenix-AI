name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  ASPNETCORE_ENVIRONMENT: "Production"
  AZURE_WEBAPP_NAME: wisgenix-content-app
  AZURE_WEBAPP_PACKAGE_PATH: './publish'
  DOTNET_VERSION: '9.x'
  SOLUTION_PATH: "./src/Content.sln"
  API_PROJECT_PATH: "./src/Content.API/Content.API.csproj"
  PUBLISH_DIR: "./publish"
  ARTIFACTS_DIR: "./src/Content.API/publish" # Artifacts will be picked from this directory
  DB_CONTEXT_NAME: "ContentDbContext"

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: .NET Build
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release
        
      - name: Test
        run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-restore --no-build --verbosity normal

      - name: Publish Artifacts
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --no-restore --no-build --property:PublishDir=${{ env.PUBLISH_DIR }}

      - name: Install EF Core CLI tool
        run: dotnet tool install --global dotnet-ef

      - name: Apply Entity Framework Migrations
        # This step runs the migrations. It uses the connection string from GitHub secrets
        # and the ASPNETCORE_ENVIRONMENT to ensure it connects to the production database.
        run: dotnet ef database update --project Wisgenix.Data --startup-project Wisgenix.API --context ${{ env.DB_CONTEXT_NAME }} --connection "${{ secrets.AZURE_SQL_CONNECTION_STRING }}"
        # Set the working directory to the project directory to ensure EF can find the context
        working-directory: ./src/Content.API/
        # EF Core CLI requires the connection string to be passed via the command line or environment variables
        # The connection string is a sensitive value, so we pass it directly here from a secret.

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{ env.ARTIFACTS_DIR }}

  deploy:
    name: Deploy as Azure App
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Deploy
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
