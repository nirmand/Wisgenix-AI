// <auto-generated />
using System;
using AIUpskillingPlatform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIUpskillingPlatform.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250324110303_Migration-2403251600")]
    partial class Migration2403251600
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.LearningRecommendation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecommendedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("LearningRecommendations");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.Question", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeneratedBy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionSourceReference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TopicID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("TopicID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.QuestionOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.UserAssessment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAssessments");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.UserAssessmentQuestion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ObtainedScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserAssessmentID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("UserAssessmentID");

                    b.ToTable("UserAssessmentQuestions");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.UserResponse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ResponseTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SelectedOptionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserAssessmentQuestionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("SelectedOptionID");

                    b.HasIndex("UserAssessmentQuestionID");

                    b.ToTable("UserResponses");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.LearningRecommendation", b =>
                {
                    b.HasOne("AIUpskillingPlatform.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.Question", b =>
                {
                    b.HasOne("AIUpskillingPlatform.Data.Entities.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.QuestionOption", b =>
                {
                    b.HasOne("AIUpskillingPlatform.Data.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.Topic", b =>
                {
                    b.HasOne("AIUpskillingPlatform.Data.Entities.Subject", "Subject")
                        .WithMany("Topics")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.UserAssessment", b =>
                {
                    b.HasOne("AIUpskillingPlatform.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.UserAssessmentQuestion", b =>
                {
                    b.HasOne("AIUpskillingPlatform.Data.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIUpskillingPlatform.Data.Entities.UserAssessment", "UserAssessment")
                        .WithMany("UserAssessmentQuestions")
                        .HasForeignKey("UserAssessmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UserAssessment");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.UserResponse", b =>
                {
                    b.HasOne("AIUpskillingPlatform.Data.Entities.QuestionOption", "SelectedOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIUpskillingPlatform.Data.Entities.UserAssessmentQuestion", "UserAssessmentQuestion")
                        .WithMany()
                        .HasForeignKey("UserAssessmentQuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SelectedOption");

                    b.Navigation("UserAssessmentQuestion");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.Subject", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.Topic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AIUpskillingPlatform.Data.Entities.UserAssessment", b =>
                {
                    b.Navigation("UserAssessmentQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
